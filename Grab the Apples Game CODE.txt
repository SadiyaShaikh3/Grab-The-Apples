#include<windows.h>
#include<stdio.h>
#include<stdlib.h>
#include<GL/glut.h>
int h=300;//distance(hen pos)
int k=300;//height(hen pos)
int m=300;//d( net pos)
int n=100;//h(net pos)
int pos=0;//flag of netmove
int level=0;
void display();
void drawtree(int,int);
char score[4]={48,48,48,48};
//score display
void scoredisp()
{
glColor3f(1,0,0);
glRasterPos2i(250,500); //specifies the current raster positon
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'S'); /A 24-point proportional spaced Times Roman font.charecter is rendered/
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'C');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'O');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'R');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'E');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,':');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,score[1]);
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,score[0]);
}
void start_screen()
{
glClearColor(0,0,0,0);
glClear(GL_DEPTH_BUFFER_BIT|GL_COLOR_BUFFER_BIT);
glColor3f(1,0,0);
glRasterPos2i(252,500);
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'G');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'R');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'A');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'B');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'T');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'H');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'E');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'A');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'P');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'P');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'L');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'E');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'S');
glColor3f(1,0,0);
glRasterPos2i(220,100);
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'P');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'R');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'E');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'S');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'S');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'"');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'G');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'"');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'T');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'O');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'S');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'T');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'A');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'R');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'T');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,' ');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'G');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'R');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'A');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'B');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'B');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'I');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'N');
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,'G');
glutSwapBuffers();
}
//draw tree
void drawtree(int x,int y)
{
//tree1
glColor3f(.3,0.0,0.0);
glBegin(GL_POLYGON);
glVertex2f(125,225);
glVertex2f(75,225);
glVertex2f(100,250);
glVertex2f(113,275);
glVertex2f(113,300);
glVertex2f(100,325);
glVertex2f(125,313);
glVertex2f(150,325);
glVertex2f(138,300);
glVertex2f(138,275);
glVertex2f(150,250);
glVertex2f(175,225);
glFlush();
glEnd();
glColor4f(0.0,.5,0.0,1);
glBegin(GL_POLYGON);
glVertex2f(88,300);
glVertex2f(63,325);
glVertex2f(50,350);
glVertex2f(50,400);
glVertex2f(63,425);
glVertex2f(88,450);
glVertex2f(125,463);
glVertex2f(163,450);
glVertex2f(188,425);
glVertex2f(200,400);
glVertex2f(200,350);
glVertex2f(188,325);
glVertex2f(163,300);
glFlush();
glEnd();
//tree2
glColor3f(0.3,0.0,0.0);
glBegin(GL_POLYGON);
glVertex2f(300,225);
glVertex2f(250,225);
glVertex2f(275,250);
glVertex2f(288,275);
glVertex2f(288,300);
glVertex2f(275,325);
glVertex2f(300,313);
glVertex2f(325,325);
glVertex2f(313,300);
glVertex2f(313,275);
glVertex2f(325,250);
glVertex2f(350,225);
glFlush();
glEnd();
glColor4f(0.0,.5,0.0,1);
glBegin(GL_POLYGON);
glVertex2f(263,300);
glVertex2f(238,325);
glVertex2f(225,350);
glVertex2f(225,400);
glVertex2f(238,425);
glVertex2f(263,450);
glVertex2f(300,463);
glVertex2f(338,450);
glVertex2f(363,425);
glVertex2f(375,400);
glVertex2f(375,350);
glVertex2f(363,325);
glVertex2f(338,300);
glFlush();
glEnd();
//tree3
glColor3f(0.3,0.0,0.0);
glBegin(GL_POLYGON);
glVertex2f(475,225);
glVertex2f(425,225);
glVertex2f(450,250);
glVertex2f(463,275);
glVertex2f(463,300);
glVertex2f(450,325);
glVertex2f(475,313);
glVertex2f(500,325);
glVertex2f(488,300);
glVertex2f(488,275);
glVertex2f(500,250);
glVertex2f(525,225);
glVertex2f(525,225);
glFlush();
glEnd();
glColor4f(0.0,.5,0.0,1);
glBegin(GL_POLYGON);
glVertex2f(438,300);
glVertex2f(413,325);
glVertex2f(400,350);
glVertex2f(400,400);
glVertex2f(413,425);
glVertex2f(438,450);
glVertex2f(475,463);
glVertex2f(513,450);
glVertex2f(538,425);
glVertex2f(550,400);
glVertex2f(550,350);
glVertex2f(538,325);
glVertex2f(513,300);
glFlush();
glEnd();
//apple1 in tree1
glPushMatrix();
glTranslatef(125,438,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple2 in tree1
glPushMatrix();
glTranslatef(88,400,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple3 in tree1
glPushMatrix();
glTranslatef(88,363,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple4 in tree1
glPushMatrix();
glTranslatef(125,338,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple5 in tree1
glPushMatrix();
glTranslatef(163,363,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple6 in tree1
glPushMatrix();
glTranslatef(163,400,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple7 in tree1
glPushMatrix();
glTranslatef(125,388,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple1 in tree2
glPushMatrix();
glTranslatef(263,400,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple2 in tree2
glPushMatrix();
glTranslatef(263,363,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple3 in tree2
glPushMatrix();
glTranslatef(300,338,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple4 in tree2
glPushMatrix();
glTranslatef(338,363,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple5 in tree2
glPushMatrix();
glTranslatef(338,400,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple6 in tree2
glPushMatrix();
glTranslatef(300,438,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple7 in tree2
glPushMatrix();
glTranslatef(300,388,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple1 in tree3
glPushMatrix();
glTranslatef(438,400,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple2 in tree3
glPushMatrix();
glTranslatef(438,363,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple3 in tree3
glPushMatrix();
glTranslatef(475,338,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple4 in tree3
glPushMatrix();
glTranslatef(513,363,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple5 in tree3
glPushMatrix();
glTranslatef(513,400,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple6 in tree3
glPushMatrix();
glTranslatef(475,438,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
//apple7 in tree3
glPushMatrix();
glTranslatef(475,388,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(7,7,7);//to make the Apple fall at the specified dist
glPopMatrix();
}
//net draw
void net(int x,int y)
{
glLineWidth(2.0);
glColor3f(0,0,0);
glBegin(GL_LINE_LOOP);
glVertex2f(x-25,y-40);
glVertex2f(x-15,y-60);
glVertex2f(x+15,y-60);
glVertex2f(x+25,y-40);
glVertex2f(x-25,y-40);
glVertex2f(x+70,y-40);
glEnd();
//point
glLineWidth(7.0);
glColor3f(0,0,0);
glBegin(GL_POINTS);
glVertex2f(x+68,y-40);
glEnd();
//draw mesh
glLineWidth(2.0);
glColor3f(1,1,1);
glBegin(GL_LINES);
glVertex2f(x-24,y-40);
glVertex2f(x+24,y-40);
glVertex2f(x+15,y-60);
glVertex2f(x+15,y-40);
glVertex2f(x+10,y-60);
glVertex2f(x+10,y-40);
glVertex2f(x+5,y-60);
glVertex2f(x+5,y-40);
glVertex2f(x,y-60);
glVertex2f(x,y-40);
glVertex2f(x-5,y-60);
glVertex2f(x-5,y-40);
glVertex2f(x-15,y-60);
glVertex2f(x-15,y-40);
glVertex2f(x-10,y-60);
glVertex2f(x-10,y-40);
glVertex2f(x-20,y-50);
glVertex2f(x+20,y-50);
glEnd();
}
//net position
void netmove()
{
/*	if(pos==0)
{
net(m,n);//net is at the centre by default
}
if(pos==1)
{
net(m-200,n);//net is at hte right end
}
if(pos==2)
{
net(m+200,n);//net is at the left end
}*/
net(m,n);
}
//translation variables
float t1=0,t2=0,t3=0;
float scale1=1,scale2=1,scale3=1;
void key_to_start(unsigned char key,int x,int y)
{
if(key=='g'||key=='G')
glutDisplayFunc(display);//if v is pressed game is started by callin display func
glutPostRedisplay();
}
//arrow keys for movement of net
void keys(int key,int x,int y)
{
if(key==GLUT_KEY_RIGHT)
{
if(m<475)
m+=25;
}
if(key==GLUT_KEY_LEFT)
{
if(m>125)
m-=25;
}
if(key==GLUT_KEY_DOWN)
{
}
if(key==GLUT_KEY_F1) /*if f1 key is pressed restart the
the game */
{
t1=0;
t2=0;
t3=0;
}
pos=-1;
if(m>100&&m<150) pos=0;
if(m>275&&m<325) pos=1;
if(m>450&&m<500) pos=2;
}
//Apple fall
void Apple1()
{
glPushMatrix();
glTranslatef(125,250,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(8,8,8);//to make the Apple fall at the specified dist
glPopMatrix();
}
void Apple2()
{
glPushMatrix();
glTranslatef(300,250,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(8,8,8);//to make the Apple fall at the specified dist
glPopMatrix();
}
void Apple3()
{
glPushMatrix();
glTranslatef(475,250,0);
glColor3f(0.0,1.0,0.0);
glBegin(GL_LINE_LOOP);
glVertex2f(12,12);
glVertex2f(13,13);
glColor3f(1.0,0.0,0.0);
glutSolidSphere(8,8,8);//to make the Apple fall at the specified dist
glPopMatrix();
}//end of Apple fall
void menu(int val)
{
switch(val)
{
case 4: exit(0);//4th option is exit
break;
}
}
void submenu1(int val)
{
switch(val)
{
case 1:
break;
}
}
void submenu2(int val)
{
switch(val)
{
case 1:level=0;
break;
case 2:level=1;
}
}
int menu1,submenu,submenu3;
void callmenu()
{
submenu=glutCreateMenu(submenu1);
glutAddMenuEntry("press the arrow keys - left, right, down",10);
glutAddMenuEntry("to control or to Apple fall press f1",10);
submenu3=glutCreateMenu(submenu2);
glutAddMenuEntry("level1",1);
glutAddMenuEntry("level2",2);
menu1=glutCreateMenu(menu);
glutAddMenuEntry("start",1);
glutAddSubMenu("insruction",submenu);
glutAddSubMenu("level",submenu3);
glutAddMenuEntry("exit",4);
glutAttachMenu(GLUT_RIGHT_BUTTON);//with the right click of mouse display the menu
}
void display()
{
//draw background
//green field
glClear(GL_COLOR_BUFFER_BIT);
glColor3f(0.0,1.0,0.0);
glBegin(GL_POLYGON);
glVertex2f(0.0,0.0);
glVertex2f(0.0,225.0);
glVertex2f(600.0,225.0);
glVertex2f(600,0);
glEnd();
//sky
glColor4f(0.7,0.9,1.0,.7);
glBegin(GL_POLYGON);
glVertex2f(0.0,226.0);
glVertex2f(0.0,600.0);
glVertex2f(600,600);
glVertex2f(600.0,226.0);
glEnd();
drawtree(h,k);
//net(m,n);
netmove();
glPushMatrix();
if(pos==0)
{
if(t1==-200) //if first Apple is caught
{
//t1+=200;
score[0]+=1;
if(score[0]==58)
{
score[1]++;//if level 1 is croseed increase the level 2 score
score[0]=48; //level 1 score finalised
}
// sc1();
scale1=0;
}
}
if(t1<-300) {t1=0; scale1=1;}
if(level==0)
{
glTranslatef(0,t1-=2,0);
}
if(level==1)
{
glTranslatef(0,t1-=1,0);
}
glScalef(scale1,scale1,scale1);
Apple1();
glPopMatrix();
glPushMatrix();
if(pos==1)
{
if(t2==-200) //if centre Apple is caught
{
//t2+=200;
score[0]+=1;
if(score[0]==58)
{
score[1]++;
score[0]=48;
}
// sc1();
scale2=0;
}
}
if(t2<-300) {t2=0; scale2=1;}
if(level==0)
{
glTranslatef(0,t2-=0.25,0);}
if(level==1)
{
glTranslatef(0,t2-=2,0);
}
glScalef(scale2,scale2,scale2);
Apple2();
glPopMatrix();
glPushMatrix();
if(pos==2)
{
if(t3==-200) //if third Apple is caught
{
//t3+=200;
score[0]+=1;
if(score[0]==58)
{
score[1]++;
score[0]=48;
}
//sc1();
scale3=0;
}
}

if(t3<-300) {t3=0; scale3=1;}
if(level==0)
{

glTranslatef(0,t3-=0.5,0);}
if(level==1)
{
glTranslatef(0,t3-=4,0);
}

glScalef(scale3,scale3,scale3);
Apple3();
glPopMatrix();

scoredisp();
netmove();

//callmenu();
glutPostRedisplay();
glutSwapBuffers();
glFlush();
}
void myinit()
{
glClearColor(1.0,1.0,1.0,1.0);
glEnable(GL_BLEND); //enable the blending
glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); //set the blend function
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho(0.0,600.0,0.0,600.0,-600,600);//describes a transformation that produces a parallel projection.
}
int main(int argc,char** argv)
{
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);

glutInitWindowSize(600,600);
glutInitWindowPosition(0,0);
glutCreateWindow("GRAB THE APPLES");
glutDisplayFunc(start_screen);

glutSpecialFunc(keys);
glutKeyboardFunc(key_to_start);
callmenu();
myinit();
glutMainLoop();
return 0;
}